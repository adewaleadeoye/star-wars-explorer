{"version":3,"sources":["utils/constants.ts","utils/helpers.js","components/Alert/alertSlice.ts","app/hooks.ts","components/Layout/Header/headerSlice.ts","components/Indicator/LoadingSpinner.tsx","api/peopleApi.ts","components/People/peopleSlice.ts","api/moviesApi.ts","components/Movies/moviesSlice.ts","api/planetsApi.ts","components/Planets/planetsSlice.ts","components/Alert/index.tsx","components/Layout/Header/index.tsx","components/ErrorBoundary/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["constants","API_BASE_URL","PEOPLE","PLANETS","MOVIES","BASE_IMG_URL","PEOPLE_IMG","getId","currentPage","position","getTotalPages","count","Math","ceil","mapPerson","person","personId","name","height","mass","hair_color","skin_color","gender","birth_year","generated_id","mapMovie","movie","movieId","title","director","producers","producer","release_date","mapPlanet","planet","planetId","terrain","population","getListItemType","itemType","initialState","open","content","undefined","severity","alertSlice","createSlice","reducers","setAlert","state","action","payload","actions","alertInfo","alertReducer","useAppDispatch","useDispatch","useAppSelector","useSelector","headerTitle","backTo","headerSlice","setHeaderTitle","setBackButtonValue","getHeaderTitle","headerReducer","getBackButtonValue","useStyles","makeStyles","theme","createStyles","root","display","marginLeft","spacing","LoadingSpinner","classes","className","peopleUrl","fetchPeople","page","a","fetch","response","ok","Error","json","peopleData","mappedPeople","results","map","index","people","pages","fetchPerson","personData","getPersonData","createAsyncThunk","dispatch","console","log","getPeopleList","setPeople","setPageCount","peopleSlice","loading","setPerson","extraReducers","builder","addCase","pending","fulfilled","rejected","listPeople","peopleReducer","displayPerson","pageCount","loadingStatus","moviesUrl","fetchMovies","moviesData","mappedMovies","movies","fetchMovie","movieData","getMovieData","getMoviesList","setMovies","moviesSlice","setMovie","listMovies","moviesReducer","displayMovie","moviesPageCount","planetsUrl","fetchPlanets","planetsData","mappedPlanet","planets","fetchPlanet","planetData","getPlanetData","getPlanetsList","setPlanets","planetsSlice","setPlanet","listPlanets","planetsReducer","displayPlanet","planetsPageCount","Alert","props","elevation","variant","width","marginTop","Toast","alert","handleClose","event","reason","Snackbar","autoHideDuration","onClose","flexGrow","menuButton","marginRight","textAlign","Header","history","useHistory","backButtonvalue","location","useLocation","AppBar","Toolbar","IconButton","edge","color","aria-label","onClick","push","Typography","pathname","Button","ArrowBack","ErrorBoundary","hasError","error","errorInfo","this","children","_","Component","Home","lazy","People","PersonDetail","Movies","MovieDetail","Planets","PlanetDetail","contentWrapper","justifyContent","App","Container","fallback","path","component","store","configureStore","reducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4fd953f6.chunk.js","sourcesContent":["const constants = {\n  API_BASE_URL: 'https://swapi.dev/api',\n  PEOPLE: 'people',\n  PLANETS: 'planets',\n  MOVIES: 'films',\n  BASE_IMG_URL:'https://starwars-visualguide.com/assets/img',\n  PEOPLE_IMG: 'characters'\n};\n\nexport default constants;\n","import constants from './constants';\n\nexport const getId = (currentPage, position) => {\n  return (currentPage - 1) * 10 + position + 1;\n};\n\nexport const getTotalPages = (count) => Math.ceil(count / 10);\n\nexport const mapPerson = (person, personId) => {\n  return {\n    name: person?.name,\n    height: person?.height,\n    mass: person?.mass,\n    hair_color: person?.hair_color,\n    skin_color: person?.skin_color,\n    gender: person?.gender,\n    birth_year: person?.birth_year,\n    generated_id: personId,\n  };\n};\n\nexport const mapMovie = (movie, movieId) => {\n  return {\n    title: movie.title,\n    director: movie.director,\n    producers: movie.producer,\n    release_date: movie.release_date,\n    generated_id: movieId,\n  };\n};\n\nexport const mapPlanet = (planet, planetId) => {\n  return {\n    title: planet.name,\n    terrain: planet.terrain,\n    population: planet.population,\n    generated_id: planetId,\n  };\n};\n\nexport const getListItemType = (itemType) => {\n  // eslint-disable-next-line default-case\n  switch (itemType) {\n    case constants.PEOPLE:\n      return constants.PEOPLE_IMG;\n    case constants.MOVIES:\n      return constants.MOVIES;\n    case constants.PLANETS:\n      return constants.PLANETS;\n  }\n};\n","import {createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface Alert {\n    open:boolean,\n    content?:string,\n    severity?: \"success\" | \"info\" | \"warning\" | \"error\"\n}\n\ntype alertState = Alert\n\ntype alertReducer = {\n    alertReducer: alertState\n}\n\nlet initialState:alertState = {\n    open: false,\n    content: undefined,\n    severity: undefined\n}\n\nconst alertSlice = createSlice({\n    name: 'alert',\n    initialState,\n    reducers: {\n        setAlert(state, action:PayloadAction<Alert>){\n            const {open, content, severity} = action.payload\n            state.open = open\n            state.content = content\n            state.severity = severity\n        }\n    }\n})\n\nexport const {setAlert} = alertSlice.actions\n\nexport const alertInfo = ({alertReducer}:alertReducer) => {return {...alertReducer}}\n\nexport default alertSlice.reducer","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface HeaderTitle {\n    headerTitle?:string,\n}\ninterface BackButtonValue {\n    backTo?: string\n}\n\ntype headerState = HeaderTitle & BackButtonValue\n\ntype headerReducer = {\n    headerReducer: headerState\n}\n\nlet initialState:headerState = {\n    headerTitle: undefined,\n    backTo: undefined\n}\n\nconst headerSlice = createSlice({\n    name: 'header',\n    initialState,\n    reducers: {\n        setHeaderTitle(state, action:PayloadAction<HeaderTitle>){\n            const {headerTitle} = action.payload\n            state.headerTitle = headerTitle\n        },\n        setBackButtonValue(state, action:PayloadAction<BackButtonValue>){\n            const {backTo} = action.payload\n            state.backTo = backTo\n        },\n    }\n})\n\nexport const {setHeaderTitle, setBackButtonValue} = headerSlice.actions\n\nexport const getHeaderTitle = ({headerReducer}:headerReducer) => headerReducer.headerTitle\nexport const getBackButtonValue = ({headerReducer}:headerReducer) => headerReducer.backTo\n\nexport default headerSlice.reducer","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      '& > * + *': {\n        marginLeft: theme.spacing(2),\n      },\n    },\n  }),\n);\n\nconst LoadingSpinner = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CircularProgress />\n    </div>\n  );\n}\n\nexport default LoadingSpinner","import constants from '../utils/constants';\nimport { getId, getTotalPages, mapPerson } from '../utils/helpers';\n\nconst peopleUrl = `${constants.API_BASE_URL}/${constants.PEOPLE}`;\n\nexport const fetchPeople = async (page: number) => {\n  const response = await fetch(`${peopleUrl}?page=${page}`);\n  if (!response.ok) {\n    throw new Error(\"Couldn't fetch people from the swapi API\");\n  }\n  const peopleData = await response.json();\n  const mappedPeople = peopleData.results.map((person: any, index: number) =>\n    mapPerson(person, getId(page, index))\n  );\n  return { people: mappedPeople, pages: getTotalPages(peopleData.count) };\n};\n\nexport const fetchPerson = async (personId: number) => {\n  const response = await fetch(`${peopleUrl}/${personId}`);\n  if (!response.ok) {\n    throw new Error(\"Couldn't fetch people from the swapi API\");\n  }\n  const personData = await response.json();\n  return mapPerson(personData, personId);\n};\n","import {createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { fetchPeople, fetchPerson } from \"../../api/peopleApi\";\nimport { Loading } from \"../../utils/types\";\nimport { setAlert } from \"../Alert/alertSlice\";\n\nexport interface Person {\n    name?: string,\n    height?: number,\n    mass?: number,\n    hair_color?: string,\n    skin_color?: string,\n    gender?: string,\n    birth_year?: string,\n    generated_id?: number,\n}\n\nexport interface People {\n    people: Array<Person>\n}\n\ninterface CurrentPerson {\n    person?: Person,\n}\n\ninterface PeoplePageCount {\n    pages: number,\n}\n\ntype peopleState = PeoplePageCount & People & CurrentPerson & Loading\n\ntype peopleReducer = {\n    peopleReducer: peopleState\n}\n\nexport const getPersonData = createAsyncThunk('people/getPersonData', async (personId: number, {dispatch}) => {\n    try {\n        const person = await fetchPerson(personId)\n        return {person}\n    } catch (error) {\n        dispatch(setAlert({open: true, content: \"Error: Could not load information for the character\", severity: \"error\"}))\n        console.log(error)\n    }\n})\n\nexport const getPeopleList = createAsyncThunk('people/getPeopleList', async (page: number, {dispatch}) => {\n    try {\n        const {people, pages} = await fetchPeople(page)\n        dispatch(setPeople({people}))\n        dispatch(setPageCount({pages}))\n        return\n    } catch (error) {\n        dispatch(setAlert({open: true, content: \"Error: Could not fetch list of star wars characters\", severity: \"error\"}))\n        console.log(error)\n    }\n})\n\nlet initialState: peopleState = {\n    pages: 0,\n    people: [],\n    person:{},\n    loading: false\n}\n\nconst peopleSlice = createSlice({\n    name: 'people',\n    initialState,\n    reducers: {\n        setPeople(state, action: PayloadAction<People>){\n            state.people = action.payload.people\n        },\n        setPerson(state, action:PayloadAction<CurrentPerson>){\n            state.person = action.payload.person\n        },\n        setPageCount(state, action:PayloadAction<PeoplePageCount>){\n            state.pages = action.payload.pages\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getPersonData.pending, (state) => {\n            state.loading = true\n        })\n        .addCase(getPersonData.fulfilled, (state, action) => {\n            state.loading = false\n            state.person = action.payload?.person\n        })\n        .addCase(getPersonData.rejected, (state, action) => {\n            state.loading = false\n        })\n        .addCase(getPeopleList.pending, (state) => {\n            state.loading = true\n        })\n        .addCase(getPeopleList.fulfilled, (state) => {\n            state.loading = false\n        })\n        .addCase(getPeopleList.rejected, (state) => {\n            state.loading = false\n        })\n    }\n})\n\nexport const {setPeople, setPerson, setPageCount} = peopleSlice.actions\n\nexport const listPeople = ({peopleReducer}:peopleReducer) => peopleReducer.people || []\nexport const displayPerson = ({peopleReducer}:peopleReducer) => peopleReducer.person || {}\nexport const pageCount = ({peopleReducer}:peopleReducer) => peopleReducer.pages\nexport const loadingStatus = ({peopleReducer}:peopleReducer) => peopleReducer.loading\n\nexport default peopleSlice.reducer\n\n","import constants from '../utils/constants';\nimport { getId, getTotalPages, mapMovie } from '../utils/helpers';\n\nconst moviesUrl = `${constants.API_BASE_URL}/${constants.MOVIES}`;\n\nexport const fetchMovies = async (page: number) => {\n  const response = await fetch(`${moviesUrl}?page=${page}`);\n  if (!response.ok) {\n    throw new Error(\"Couldn't fetch movies from the swapi API\");\n  }\n  const moviesData = await response.json();\n  const mappedMovies = moviesData.results.map((movie: any, index: number) =>\n    mapMovie(movie, getId(page, index))\n  );\n  return { movies: mappedMovies, pages: getTotalPages(moviesData.count) };\n};\n\nexport const fetchMovie = async (movieId: number) => {\n  const response = await fetch(`${moviesUrl}/${movieId}`);\n  if (!response.ok) {\n    throw new Error(\"Couldn't fetch people from the swapi API\");\n  }\n  const movieData = await response.json();\n  return mapMovie(movieData, movieId);\n};\n","import {createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { fetchMovie, fetchMovies } from \"../../api/moviesApi\";\nimport { Loading } from \"../../utils/types\";\nimport { setAlert } from \"../Alert/alertSlice\";\n\nexport interface Movie {\n    title?: string,\n    director?: string,\n    producers?: string,\n    release_date?: string,\n    generated_id?: number,\n}\n\nexport interface Movies {\n    movies: Array<Movie>\n}\n\ninterface SelectedMovie {\n    movie?: Movie,\n}\n\ninterface MoviesPageCount {\n    pages: number,\n}\n\ntype moviesState = MoviesPageCount & Movies & SelectedMovie & Loading\n\ntype moviesReducer = {\n    moviesReducer: moviesState\n}\n\nexport const getMovieData = createAsyncThunk('movies/getMovieData', async (movieId: number, {dispatch}) => {\n    try {\n        const movie = await fetchMovie(movieId)\n        return {movie}\n    } catch (error) {\n        dispatch(setAlert({open: true, content: \"Error: Could not load information for the selected movie\", severity: \"error\"}))\n        console.log(error)\n    }\n})\n\nexport const getMoviesList = createAsyncThunk('movies/getMoviesList', async (page: number, {dispatch}) => {\n    try {\n        const {movies, pages} = await fetchMovies(page)\n        dispatch(setMovies({movies}))\n        dispatch(setPageCount({pages}))\n        return\n    } catch (error) {\n        dispatch(setAlert({open: true, content: \"Error: Could not fetch list of movies\", severity: \"error\"}))\n        console.log(error)\n    }\n})\n\nlet initialState: moviesState = {\n    pages: 0,\n    movies: [],\n    movie: {},\n    loading: false\n}\n\nconst moviesSlice = createSlice({\n    name: 'movies',\n    initialState,\n    reducers: {\n        setMovies(state, action: PayloadAction<Movies>){\n            state.movies = action.payload.movies\n        },\n        setMovie(state, action:PayloadAction<SelectedMovie>){\n            state.movie = action.payload.movie\n        },\n        setPageCount(state, action:PayloadAction<MoviesPageCount>){\n            state.pages = action.payload.pages\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getMovieData.pending, (state) => {\n            state.loading = true\n        })\n        .addCase(getMovieData.fulfilled, (state, action) => {\n            state.loading = false\n            state.movie = action.payload?.movie\n        })\n        .addCase(getMovieData.rejected, (state, action) => {\n            state.loading = false\n        })\n        .addCase(getMoviesList.pending, (state) => {\n            state.loading = true\n        })\n        .addCase(getMoviesList.fulfilled, (state) => {\n            state.loading = false\n        })\n        .addCase(getMoviesList.rejected, (state) => {\n            state.loading = false\n        })\n    }\n})\n\n\nexport const {setMovies, setMovie, setPageCount} = moviesSlice.actions\n\nexport const listMovies = ({moviesReducer}:moviesReducer) => moviesReducer.movies || []\nexport const displayMovie = ({moviesReducer}:moviesReducer) => moviesReducer.movie || {}\nexport const moviesPageCount = ({moviesReducer}:moviesReducer) => moviesReducer.pages\nexport const loadingStatus = ({moviesReducer}:moviesReducer) => moviesReducer.loading\n\nexport default moviesSlice.reducer\n\n","import constants from '../utils/constants';\nimport { getId, getTotalPages, mapPlanet } from '../utils/helpers';\n\nconst planetsUrl = `${constants.API_BASE_URL}/${constants.PLANETS}`;\n\nexport const fetchPlanets = async (page: number) => {\n  const response = await fetch(`${planetsUrl}?page=${page}`);\n  if (!response.ok) {\n    throw new Error(\"Couldn't fetch movies from the swapi API\");\n  }\n  const planetsData = await response.json();\n  const mappedPlanet = planetsData.results.map((planet: any, index: number) =>\n    mapPlanet(planet, getId(page, index))\n  );\n  return { planets: mappedPlanet, pages: getTotalPages(planetsData.count) };\n};\n\nexport const fetchPlanet = async (planetId: number) => {\n  const response = await fetch(`${planetsUrl}/${planetId}`);\n  if (!response.ok) {\n    throw new Error(\"Couldn't fetch people from the swapi API\");\n  }\n  const planetData = await response.json();\n  return mapPlanet(planetData, planetId);\n};\n","import {createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { fetchPlanet, fetchPlanets } from \"../../api/planetsApi\";\nimport { Loading } from \"../../utils/types\";\nimport { setAlert } from \"../Alert/alertSlice\";\n\nexport interface Planet {\n    title?: string,\n    terrain?: string,\n    population?: string,\n    generated_id?: number,\n}\n\nexport interface Planets {\n    planets: Array<Planet>\n}\n\ninterface SelectedPlanet {\n    planet?: Planet,\n}\n\ninterface PlanetsPageCount {\n    pages: number,\n}\n\ntype planetsState = PlanetsPageCount & Planets & SelectedPlanet & Loading\n\ntype planetsReducer = {\n    planetsReducer: planetsState\n}\n\nexport const getPlanetData = createAsyncThunk('movies/getPlanetData', async (planetId: number, {dispatch}) => {\n    try {\n        const planet = await fetchPlanet(planetId)\n        return {planet}\n    } catch (error) {\n        dispatch(setAlert({open: true, content: \"Error: Could not load information for the selected planet\", severity: \"error\"}))\n        console.log(error)\n    }\n})\n\nexport const getPlanetsList = createAsyncThunk('movies/getPlanetsList', async (page: number, {dispatch}) => {\n    try {\n        const {planets, pages} = await fetchPlanets(page)\n        dispatch(setPlanets({planets}))\n        dispatch(setPageCount({pages}))\n        return\n    } catch (error) {\n        dispatch(setAlert({open: true, content: \"Error: Could not fetch list of planets\", severity: \"error\"}))\n        console.log(error)\n    }\n})\n\nlet initialState: planetsState = {\n    pages: 0,\n    planets: [],\n    planet: {},\n    loading: false\n}\n\nconst planetsSlice = createSlice({\n    name: 'planets',\n    initialState,\n    reducers: {\n        setPlanets(state, action: PayloadAction<Planets>){\n            state.planets = action.payload.planets\n        },\n        setPlanet(state, action:PayloadAction<SelectedPlanet>){\n            state.planet = action.payload.planet\n        },\n        setPageCount(state, action:PayloadAction<PlanetsPageCount>){\n            console.log(action)\n            state.pages = action.payload.pages\n        }\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getPlanetData.pending, (state) => {\n            state.loading = true\n        })\n        .addCase(getPlanetData.fulfilled, (state, action) => {\n            state.loading = false\n            state.planet = action.payload?.planet\n        })\n        .addCase(getPlanetData.rejected, (state, action) => {\n            state.loading = false\n        })\n        .addCase(getPlanetsList.pending, (state) => {\n            state.loading = true\n        })\n        .addCase(getPlanetsList.fulfilled, (state) => {\n            state.loading = false\n        })\n        .addCase(getPlanetsList.rejected, (state) => {\n            state.loading = false\n        })\n    }\n})\n\n\nexport const {setPlanets, setPlanet, setPageCount} = planetsSlice.actions\n\nexport const listPlanets = ({planetsReducer}:planetsReducer) => planetsReducer.planets || []\nexport const displayPlanet = ({planetsReducer}:planetsReducer) => planetsReducer.planet || {}\nexport const planetsPageCount = ({planetsReducer}:planetsReducer) => planetsReducer.pages\nexport const loadingStatus = ({planetsReducer}:planetsReducer) => planetsReducer.loading\n\nexport default planetsSlice.reducer\n\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { alertInfo, setAlert } from './alertSlice';\n\nconst Alert = (props: AlertProps) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\n const Toast = () => {\n  const classes = useStyles();\n  const alert = useAppSelector(alertInfo)\n  const dispatch = useAppDispatch()\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAlert({open: false, content: undefined, severity: undefined}))\n  };\n\n  return (\n    <div className={classes.root}>\n      <Snackbar open={alert.open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity={alert.severity}>\n          {alert.content}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default Toast\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { useAppSelector } from '../../../app/hooks';\nimport { getBackButtonValue, getHeaderTitle} from './headerSlice';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport { ArrowBack } from '@material-ui/icons';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      textAlign:'center'\n    },\n  }),\n);\n\nconst Header = () => {\n  const classes = useStyles();\n  const history = useHistory()\n  const headerTitle = useAppSelector(getHeaderTitle)\n  const backButtonvalue = useAppSelector(getBackButtonValue)\n  const location = useLocation()\n\n  const goHome = () => {\n    history.push('/')\n  }\n\n  const goBack = () => {\n    history.push(`${backButtonvalue}`)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={goHome}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            {headerTitle}\n          </Typography>\n          {location.pathname !== \"/\" && <Button color=\"inherit\" onClick={goBack}><ArrowBack /></Button>}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default Header\n","import React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error(\"Uncaught error:\", error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n          <h1>Sorry. there was an error</h1>\n          )\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport Toast from './components/Alert';\nimport Header from './components/Layout/Header';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport LoadingSpinner from './components/Indicator/LoadingSpinner';\nimport ErrorBoundary from './components/ErrorBoundary';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst People = lazy(() => import('./pages/People'));\nconst PersonDetail = lazy(() => import('./pages/People/PersonDetail'));\nconst Movies = lazy(() => import('./pages/Movies'));\nconst MovieDetail = lazy(() => import('./pages/Movies/MovieDetail'));\nconst Planets = lazy(() => import('./pages/Planets'));\nconst PlanetDetail = lazy(() => import('./pages/Planets/PlanetDetail'));\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    contentWrapper: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '1em',\n    },\n  })\n);\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Header />\n      <Container className={classes.contentWrapper}>\n        <ErrorBoundary>\n          <Suspense fallback={<LoadingSpinner />}>\n            <Switch>\n              <Route path=\"/people/:id\" component={PersonDetail} />\n              <Route path=\"/people\" component={People} />\n              <Route path=\"/movies/:id\" component={MovieDetail} />\n              <Route path=\"/movies\" component={Movies} />\n              <Route path=\"/planets/:id\" component={PlanetDetail} />\n              <Route path=\"/planets\" component={Planets} />\n              <Route path=\"/\" component={Home} />\n            </Switch>\n          </Suspense>\n        </ErrorBoundary>\n      </Container>\n      <Toast />\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport peopleReducer from '../components/People/peopleSlice';\nimport moviesReducer from '../components/Movies/moviesSlice';\nimport planetsReducer from '../components/Planets/planetsSlice'\nimport alertReducer from '../components/Alert/alertSlice'\nimport headerReducer from '../components/Layout/Header/headerSlice'\n\nexport const store = configureStore({\n  reducer: {\n    peopleReducer,\n    moviesReducer,\n    planetsReducer,\n    alertReducer,\n    headerReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}