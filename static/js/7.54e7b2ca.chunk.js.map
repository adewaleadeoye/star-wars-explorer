{"version":3,"sources":["../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/CardMedia/CardMedia.js","../node_modules/@material-ui/core/esm/CardContent/CardContent.js","components/Movies/Movie.tsx","pages/Movies/MovieDetail.tsx"],"names":["Card","React","props","ref","classes","className","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","name","MEDIA_COMPONENTS","CardMedia","children","_props$component","component","Component","image","src","style","isMediaComponent","indexOf","composedStyle","backgroundImage","concat","media","img","undefined","display","backgroundSize","backgroundRepeat","backgroundPosition","width","objectFit","CardContent","padding","paddingBottom","useStyles","makeStyles","theme","createStyles","details","flexDirection","content","flex","cover","controls","alignItems","paddingLeft","spacing","playIcon","height","Movie","movie","useAppSelector","displayMovie","isLoading","loadingStatus","location","useLocation","dispatch","useAppDispatch","movieId","pathname","split","noMovieData","Object","keys","length","useEffect","getMovieData","Number","LoadingSpinner","Typography","variant","title","director","producers","release_date","constants","BASE_IMG_URL","MOVIES","generated_id","MovieDetail","useDispatch","setHeaderTitle","headerTitle","setBackButtonValue","backTo"],"mappings":"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","file":"static/js/7.54e7b2ca.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { chainPropTypes } from '@material-ui/utils';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'block',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center'\n  },\n\n  /* Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`. */\n  media: {\n    width: '100%'\n  },\n\n  /* Styles applied to the root element if `component=\"picture or img\"`. */\n  img: {\n    // ⚠️ object-fit is not supported by IE 11.\n    objectFit: 'cover'\n  }\n};\nvar MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];\nvar CardMedia = /*#__PURE__*/React.forwardRef(function CardMedia(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      image = props.image,\n      src = props.src,\n      style = props.style,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"image\", \"src\", \"style\"]);\n\n  var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;\n  var composedStyle = !isMediaComponent && image ? _extends({\n    backgroundImage: \"url(\\\"\".concat(image, \"\\\")\")\n  }, style) : style;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, isMediaComponent && classes.media, \"picture img\".indexOf(Component) !== -1 && classes.img),\n    ref: ref,\n    style: composedStyle,\n    src: isMediaComponent ? image || src : undefined\n  }, other), children);\n});\nprocess.env.NODE_ENV !== \"production\" ? CardMedia.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: chainPropTypes(PropTypes.node, function (props) {\n    if (!props.children && !props.image && !props.src && !props.component) {\n      return new Error('Material-UI: Either `children`, `image`, `src` or `component` prop must be specified.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Image to be displayed as a background image.\n   * Either `image` or `src` prop must be specified.\n   * Note that caller must specify height otherwise the image will not be visible.\n   */\n  image: PropTypes.string,\n\n  /**\n   * An alias for `image` property.\n   * Available only with media components.\n   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.\n   */\n  src: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardMedia'\n})(CardMedia);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","import React, { useEffect } from 'react';\nimport { Theme, createStyles, makeStyles} from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { displayMovie, getMovieData, loadingStatus } from './moviesSlice';\nimport { useLocation } from 'react-router-dom';\nimport constants from '../../utils/constants';\nimport LoadingSpinner from '../Indicator/LoadingSpinner';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    details: {\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    content: {\n      flex: '1 0 auto',\n    },\n    cover: {\n      width: 151,\n    },\n    controls: {\n      display: 'flex',\n      alignItems: 'center',\n      paddingLeft: theme.spacing(1),\n      paddingBottom: theme.spacing(1),\n    },\n    playIcon: {\n      height: 38,\n      width: 38,\n    },\n  }),\n);\n\nconst Movie = () => {\n  const classes = useStyles();\n  const movie = useAppSelector(displayMovie)\n  const isLoading = useAppSelector(loadingStatus)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const movieId = location.pathname.split(\"/\")[2]\n  const noMovieData = Object.keys(movie).length === 0\n\n  useEffect(() => {\n    const getMovie = () => {\n      dispatch(getMovieData(Number(movieId)))\n    }\n    noMovieData && getMovie()\n  },[movieId, dispatch, noMovieData])\n\n  if(isLoading){\n    return (<LoadingSpinner />)\n  }\n  \n  if(noMovieData){\n    return (<Typography variant=\"body2\">No information found</Typography>)\n  }\n\n  return (\n    <Card className={classes.root}>\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          <Typography component=\"h5\" variant=\"h5\">\n            {movie.title}\n          </Typography>\n          <Typography variant=\"subtitle1\">\n            Director: {movie.director}\n          </Typography>\n          <Typography variant=\"subtitle1\">\n            Producers: {movie.producers}\n          </Typography>\n          <Typography variant=\"subtitle1\">\n            Release Date: {movie.release_date}\n          </Typography>\n        </CardContent>\n      </div>\n      <CardMedia\n        className={classes.cover}\n        image={`${constants.BASE_IMG_URL}/${constants.MOVIES}/${movie.generated_id}.jpg`}\n        title={movie.title}\n      />\n    </Card>\n  );\n}\n\nexport default Movie\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  setBackButtonValue,\n  setHeaderTitle,\n} from '../../components/Layout/Header/headerSlice';\nimport Movie from '../../components/Movies/Movie';\n\nconst MovieDetail = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setHeaderTitle({ headerTitle: 'Movies' }));\n    dispatch(setBackButtonValue({ backTo: '/movies' }));\n  }, [dispatch]);\n\n  return <Movie />;\n};\n\nexport default MovieDetail;\n"],"sourceRoot":""}